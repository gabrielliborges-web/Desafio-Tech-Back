generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

enum Theme {
  LIGHT
  DARK
}

enum MovieStatus {
  DRAFT
  PUBLISHED
}

enum Visibility {
  PRIVATE
  PUBLIC
}

model User {
  id          String          @id @default(uuid())
  name        String
  email       String          @unique
  password    String
  theme       Theme?          @default(LIGHT)
  movies      Movie[]
  ratings     Rating[]
  comments    Comment[]
  likes       Like[]
  notifications Notification[]
  settings    UserSettings?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

model Movie {
  id          String          @id @default(uuid())
  title       String
  originalTitle String?
  description String?
  releaseDate DateTime?
  duration    Int?
  imageUrl    String?
  linkPreview String?
  actors      Json?
  director    String?
  producers   Json?
  language    String?
  country     String?
  budget      Decimal?        @db.Decimal(12,2)
  revenue     Decimal?        @db.Decimal(12,2)
  profit      Decimal?        @db.Decimal(12,2)
  ratingAvg   Decimal?        @db.Decimal(3,2)
  status      MovieStatus     @default(DRAFT)
  visibility  Visibility      @default(PUBLIC)
  userId      String
  user        User            @relation(fields: [userId], references: [id])
  genres      MovieGenre[]
  ratings     Rating[]
  comments    Comment[]
  likes       Like[]
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

model Genre {
  id        String       @id @default(uuid())
  name      String
  movies    MovieGenre[]
}

model MovieGenre {
  id        String   @id @default(uuid())
  movieId   String
  genreId   String
  movie     Movie    @relation(fields: [movieId], references: [id])
  genre     Genre    @relation(fields: [genreId], references: [id])
}

model Rating {
  id        String   @id @default(uuid())
  userId    String
  movieId   String
  score     Int
  comment   String?
  user      User     @relation(fields: [userId], references: [id])
  movie     Movie    @relation(fields: [movieId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id        String    @id @default(uuid())
  userId    String
  movieId   String
  content   String
  parentId  String?
  user      User      @relation(fields: [userId], references: [id])
  movie     Movie     @relation(fields: [movieId], references: [id])
  parent    Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies   Comment[] @relation("CommentReplies")
  likes     Like[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Like {
  id        String    @id @default(uuid())
  userId    String
  movieId   String?
  commentId String?
  user      User      @relation(fields: [userId], references: [id])
  movie     Movie?    @relation(fields: [movieId], references: [id])
  comment   Comment?  @relation(fields: [commentId], references: [id])
  createdAt DateTime  @default(now())
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  title     String?
  message   String?
  type      String?
  link      String?
  read      Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model UserSettings {
  id                   String   @id @default(uuid())
  userId               String   @unique
  theme                Theme?   @default(LIGHT)
  notificationsEnabled Boolean  @default(true)
  user                 User     @relation(fields: [userId], references: [id])
  createdAt            DateTime @default(now())
}

model PasswordReset {
  id        String   @id @default(uuid())
  email     String
  code      String
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}